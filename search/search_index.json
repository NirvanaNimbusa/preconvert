{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Preconvert A Library to enable preconversion of any Python type into one that is easily serializable. Preconvert provides a way to define conversions from more complex objects and datastructures into the base types before serialization happens. This happens in a way that is independant of the eventual form of serialization, allowing you to easily then serialize into multiple formats. Why? Have you ever tried to json.dumps a data structure, only to be surprised when your DataClass throws an exception, or your namedtuple outputs as a list? Preconvert was created to solve this problem across common serialization formats. Before Preconvert: import sys import json from dataclasses import dataclass @dataclass class InventoryItem: \"\"\"Class for keeping track of an item in inventory.\"\"\" name: str unit_price: float quantity_on_hand: int = 0 def total_cost(self) -> float: return self.unit_price * self.quantity_on_hand my_store_inventory = [InventoryItem(\"beer\", unit_price=0.0, quantity_on_hand=sys.maxsize), InventoryItem(\"bacon\", unit_price=2.5, quantity_on_hand=3)] json.dumps(my_store_inventory) output >>> 177 178 --> 179 raise TypeError(f'Object of type {o.__class__.__name__} ' 180 f'is not JSON serializable') 181 TypeError: Object of type InventoryItem is not JSON serializable D: After preconvert: import sys import json from preconvert.output import json @dataclass class InventoryItem: \"\"\"Class for keeping track of an item in inventory.\"\"\" name: str unit_price: float quantity_on_hand: int = 0 def total_cost(self) -> float: return self.unit_price * self.quantity_on_hand my_store_inventory = [InventoryItem(\"beer\", unit_price=0.0, quantity_on_hand=sys.maxsize), InventoryItem(\"bacon\", unit_price=2.5, quantity_on_hand=3)] json.dumps(my_store_inventory) >>> '[{\"name\": \"beer\", \"unit_price\": 0.0, \"quantity_on_hand\": 9223372036854775807}, {\"name\": \"bacon\", \"unit_price\": 2.5, \"quantity_on_hand\": 3}]' :D Design goals: Enable conversion from complex to simple types independant of desired output format Provide built in conversion for common types that are not universally supported (dataclasses, namedtuple, etc...) Provide a way to build custom preconverts or override built-in preconverts Ability to build preconverts that are dependent on the destination format Easy utilization from existing projects Minimal overhead when utilized with common serialization formats How do I use this? Download pip3 install preconvert Utilize If your project uses one of our built-in supported serializers (json, msgpak, bson) you can simply replace your existing serializer import with a preconvert one: from preconvert.outputs import json OR from preconvert.outputs import simplejson as json OR from preconvert.outputs import msgpack OR from preconvert.outputs import bson If not you can inject preconvert before usage of any other serializers, often by setting a default or on_onknown parameter: import preconvert import my_serializer my_serializer.dumps(default=preconvert.default_serializable) How do I extend this? Want to add preconversion to your own custom types? For OOP projects, one easy way to do this is to add a __jsonifiable__ method to your object: class MyCustomClass(object): def __init__(self, first_name, children=()): self.first_name = first_name self.children = children def __jsonifiable__(self) return {'first': self.first_name, 'children': children} For other entities, such as objects you do not control, you can register a new preconvert using the preconvert.converter decorator: import preconvert @preconvert.converter(SomeFrameworkObject) def convert_framework_object(instance): return {'name': instance.name} You can also, optionally, specify preconversions per an intended serialization format: import preconvert @preconvert.json(SomeFrameworkObject) def convert_framework_object(instance): return {'json': {'name': instance.name}} @preconvert.msgpack(SomeFrameworkObject) def convert_framework_object(instance): return ['name', instance.name]","title":"Home"},{"location":"#preconvert","text":"A Library to enable preconversion of any Python type into one that is easily serializable. Preconvert provides a way to define conversions from more complex objects and datastructures into the base types before serialization happens. This happens in a way that is independant of the eventual form of serialization, allowing you to easily then serialize into multiple formats.","title":"Preconvert"},{"location":"#why","text":"Have you ever tried to json.dumps a data structure, only to be surprised when your DataClass throws an exception, or your namedtuple outputs as a list? Preconvert was created to solve this problem across common serialization formats. Before Preconvert: import sys import json from dataclasses import dataclass @dataclass class InventoryItem: \"\"\"Class for keeping track of an item in inventory.\"\"\" name: str unit_price: float quantity_on_hand: int = 0 def total_cost(self) -> float: return self.unit_price * self.quantity_on_hand my_store_inventory = [InventoryItem(\"beer\", unit_price=0.0, quantity_on_hand=sys.maxsize), InventoryItem(\"bacon\", unit_price=2.5, quantity_on_hand=3)] json.dumps(my_store_inventory) output >>> 177 178 --> 179 raise TypeError(f'Object of type {o.__class__.__name__} ' 180 f'is not JSON serializable') 181 TypeError: Object of type InventoryItem is not JSON serializable D: After preconvert: import sys import json from preconvert.output import json @dataclass class InventoryItem: \"\"\"Class for keeping track of an item in inventory.\"\"\" name: str unit_price: float quantity_on_hand: int = 0 def total_cost(self) -> float: return self.unit_price * self.quantity_on_hand my_store_inventory = [InventoryItem(\"beer\", unit_price=0.0, quantity_on_hand=sys.maxsize), InventoryItem(\"bacon\", unit_price=2.5, quantity_on_hand=3)] json.dumps(my_store_inventory) >>> '[{\"name\": \"beer\", \"unit_price\": 0.0, \"quantity_on_hand\": 9223372036854775807}, {\"name\": \"bacon\", \"unit_price\": 2.5, \"quantity_on_hand\": 3}]' :D","title":"Why?"},{"location":"#design-goals","text":"Enable conversion from complex to simple types independant of desired output format Provide built in conversion for common types that are not universally supported (dataclasses, namedtuple, etc...) Provide a way to build custom preconverts or override built-in preconverts Ability to build preconverts that are dependent on the destination format Easy utilization from existing projects Minimal overhead when utilized with common serialization formats","title":"Design goals:"},{"location":"#how-do-i-use-this","text":"Download pip3 install preconvert Utilize If your project uses one of our built-in supported serializers (json, msgpak, bson) you can simply replace your existing serializer import with a preconvert one: from preconvert.outputs import json OR from preconvert.outputs import simplejson as json OR from preconvert.outputs import msgpack OR from preconvert.outputs import bson If not you can inject preconvert before usage of any other serializers, often by setting a default or on_onknown parameter: import preconvert import my_serializer my_serializer.dumps(default=preconvert.default_serializable)","title":"How do I use this?"},{"location":"#how-do-i-extend-this","text":"Want to add preconversion to your own custom types? For OOP projects, one easy way to do this is to add a __jsonifiable__ method to your object: class MyCustomClass(object): def __init__(self, first_name, children=()): self.first_name = first_name self.children = children def __jsonifiable__(self) return {'first': self.first_name, 'children': children} For other entities, such as objects you do not control, you can register a new preconvert using the preconvert.converter decorator: import preconvert @preconvert.converter(SomeFrameworkObject) def convert_framework_object(instance): return {'name': instance.name} You can also, optionally, specify preconversions per an intended serialization format: import preconvert @preconvert.json(SomeFrameworkObject) def convert_framework_object(instance): return {'json': {'name': instance.name}} @preconvert.msgpack(SomeFrameworkObject) def convert_framework_object(instance): return ['name', instance.name]","title":"How do I extend this?"},{"location":"preconvert/","text":"Module preconvert A Library to enable preconversion of any Python type into one that is easily serializable Sub-modules preconvert.convert preconvert.converters preconvert.exceptions preconvert.output preconvert.register Functions converter def ( *kinds: Any, scope: str = 'base', store: Dict[str, Dict[str, Dict[str, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}}, override: bool = False, package: Union[str, preconvert.register.AutoPackage] = <AutoPackage.FUNCTION_OR_PRECONVERT: 3> ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged. default_serializer def ( item: Any, namespace: str = 'base', base_namespace: str = 'base', using: Union[Iterable[str], preconvert.convert.PreconversionSource] = <PreconversionSource.ALL_PACKAGES: 1>, store: Dict[str, Dict[str, Dict[Any, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}} )","title":"Preconvert"},{"location":"preconvert/#module-preconvert","text":"A Library to enable preconversion of any Python type into one that is easily serializable","title":"Module preconvert"},{"location":"preconvert/#sub-modules","text":"preconvert.convert preconvert.converters preconvert.exceptions preconvert.output preconvert.register","title":"Sub-modules"},{"location":"preconvert/#functions","text":"","title":"Functions"},{"location":"preconvert/#converter","text":"def ( *kinds: Any, scope: str = 'base', store: Dict[str, Dict[str, Dict[str, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}}, override: bool = False, package: Union[str, preconvert.register.AutoPackage] = <AutoPackage.FUNCTION_OR_PRECONVERT: 3> ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged.","title":"converter"},{"location":"preconvert/#default_serializer","text":"def ( item: Any, namespace: str = 'base', base_namespace: str = 'base', using: Union[Iterable[str], preconvert.convert.PreconversionSource] = <PreconversionSource.ALL_PACKAGES: 1>, store: Dict[str, Dict[str, Dict[Any, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}} )","title":"default_serializer"},{"location":"preconvert/convert/","text":"Module preconvert.convert Functions default_serializer def ( item: Any, namespace: str = 'base', base_namespace: str = 'base', using: Union[Iterable[str], preconvert.convert.PreconversionSource] = <PreconversionSource.ALL_PACKAGES: 1>, store: Dict[str, Dict[str, Dict[Any, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}} ) Classes PreconversionSource(*args, **kwargs) : All globally available conversion sources ### Ancestors (in MRO) * enum.Enum ### Class variables ```python3 ALL_PACKAGES ``` : ```python3 PRECONVERT ``` :","title":"Convert"},{"location":"preconvert/convert/#module-preconvertconvert","text":"","title":"Module preconvert.convert"},{"location":"preconvert/convert/#functions","text":"","title":"Functions"},{"location":"preconvert/convert/#default_serializer","text":"def ( item: Any, namespace: str = 'base', base_namespace: str = 'base', using: Union[Iterable[str], preconvert.convert.PreconversionSource] = <PreconversionSource.ALL_PACKAGES: 1>, store: Dict[str, Dict[str, Dict[Any, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}} )","title":"default_serializer"},{"location":"preconvert/convert/#classes","text":"PreconversionSource(*args, **kwargs) : All globally available conversion sources ### Ancestors (in MRO) * enum.Enum ### Class variables ```python3 ALL_PACKAGES ``` : ```python3 PRECONVERT ``` :","title":"Classes"},{"location":"preconvert/converters/","text":"Module preconvert.converters Functions byte_converter def ( item ) convert_data_class def ( instance ) convert_namedtuple def ( instance: Any ) -> Union[Dict, tuple] nverts a tuple of type namedtuple to a dict. This isn't registered as injecting this via registration won't work because it will never be falling through to as tuples convert to list. if the tuple isn't a named one, it will return the tuple unchanged datetime_converter def ( item ) time_delta_converter def ( item ) use_value_attribute def ( item )","title":"Converters"},{"location":"preconvert/converters/#module-preconvertconverters","text":"","title":"Module preconvert.converters"},{"location":"preconvert/converters/#functions","text":"","title":"Functions"},{"location":"preconvert/converters/#byte_converter","text":"def ( item )","title":"byte_converter"},{"location":"preconvert/converters/#convert_data_class","text":"def ( instance )","title":"convert_data_class"},{"location":"preconvert/converters/#convert_namedtuple","text":"def ( instance: Any ) -> Union[Dict, tuple] nverts a tuple of type namedtuple to a dict. This isn't registered as injecting this via registration won't work because it will never be falling through to as tuples convert to list. if the tuple isn't a named one, it will return the tuple unchanged","title":"convert_namedtuple"},{"location":"preconvert/converters/#datetime_converter","text":"def ( item )","title":"datetime_converter"},{"location":"preconvert/converters/#time_delta_converter","text":"def ( item )","title":"time_delta_converter"},{"location":"preconvert/converters/#use_value_attribute","text":"def ( item )","title":"use_value_attribute"},{"location":"preconvert/exceptions/","text":"Module preconvert.exceptions Defines all exceptions that can be thrown by the preconvert project Classes Error(*args, **kwargs) : Base class for exceptions thrown from the preconvert project ### Ancestors (in MRO) * builtins.Exception * builtins.BaseException ### Descendants * preconvert.exceptions.ExistingConverter * preconvert.exceptions.Unconvertable ExistingConverter(kind, existing, new) : Should be raised when a converter already exists for a specified type ### Ancestors (in MRO) * preconvert.exceptions.Error * builtins.Exception * builtins.BaseException Unconvertable(item) : Raised when the provided item is not convertable using the provided converter(s) ### Ancestors (in MRO) * preconvert.exceptions.Error * builtins.Exception * builtins.BaseException","title":"Exceptions"},{"location":"preconvert/exceptions/#module-preconvertexceptions","text":"Defines all exceptions that can be thrown by the preconvert project","title":"Module preconvert.exceptions"},{"location":"preconvert/exceptions/#classes","text":"Error(*args, **kwargs) : Base class for exceptions thrown from the preconvert project ### Ancestors (in MRO) * builtins.Exception * builtins.BaseException ### Descendants * preconvert.exceptions.ExistingConverter * preconvert.exceptions.Unconvertable ExistingConverter(kind, existing, new) : Should be raised when a converter already exists for a specified type ### Ancestors (in MRO) * preconvert.exceptions.Error * builtins.Exception * builtins.BaseException Unconvertable(item) : Raised when the provided item is not convertable using the provided converter(s) ### Ancestors (in MRO) * preconvert.exceptions.Error * builtins.Exception * builtins.BaseException","title":"Classes"},{"location":"preconvert/register/","text":"Module preconvert.register This module handles the registration of preconverters Functions converter def ( *kinds: Any, scope: str = 'base', store: Dict[str, Dict[str, Dict[str, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}}, override: bool = False, package: Union[str, preconvert.register.AutoPackage] = <AutoPackage.FUNCTION_OR_PRECONVERT: 3> ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged. Classes AutoPackage(*args, **kwargs) : Provides options for the automatic determination of a package name ### Ancestors (in MRO) * enum.Enum ### Class variables ```python3 FUNCTION ``` : ```python3 FUNCTION_OR_PRECONVERT ``` : ```python3 PRECONVERT ``` :","title":"Register"},{"location":"preconvert/register/#module-preconvertregister","text":"This module handles the registration of preconverters","title":"Module preconvert.register"},{"location":"preconvert/register/#functions","text":"","title":"Functions"},{"location":"preconvert/register/#converter","text":"def ( *kinds: Any, scope: str = 'base', store: Dict[str, Dict[str, Dict[str, Callable]]] = {'preconvert': {'base': {<class 'object'>: <function convert_data_class at 0x7f440fbd0400>, typing.Collection: <class 'list'>, <class 'generator'>: <class 'tuple'>, typing.Mapping: <class 'dict'>, <class 'decimal.Decimal'>: <class 'str'>, <class 'uuid.UUID'>: <class 'str'>, <class 'bytes'>: <function byte_converter at 0x7f440fbd0488>, <class 'datetime.date'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.datetime'>: <function datetime_converter at 0x7f440fbd0510>, <class 'datetime.timedelta'>: <function time_delta_converter at 0x7f440fbd0598>, <enum 'Enum'>: <function use_value_attribute at 0x7f440fbd0620>, <class 'typing.NamedTuple'>: <function convert_namedtuple at 0x7f440fbd06a8>}}}, override: bool = False, package: Union[str, preconvert.register.AutoPackage] = <AutoPackage.FUNCTION_OR_PRECONVERT: 3> ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged.","title":"converter"},{"location":"preconvert/register/#classes","text":"AutoPackage(*args, **kwargs) : Provides options for the automatic determination of a package name ### Ancestors (in MRO) * enum.Enum ### Class variables ```python3 FUNCTION ``` : ```python3 FUNCTION_OR_PRECONVERT ``` : ```python3 PRECONVERT ``` :","title":"Classes"},{"location":"preconvert/output/","text":"Module preconvert.output Exposes all output formatters that have built-in support for preconversion Note: the interesting try: catch: pattern is done as their isn't a guarantee that the user has any of the given output formatters installed, which is required for preconvert to plug-in it's preconversion. Sub-modules preconvert.output.bson preconvert.output.json preconvert.output.msgpack preconvert.output.simplejson","title":"Output"},{"location":"preconvert/output/#module-preconvertoutput","text":"Exposes all output formatters that have built-in support for preconversion Note: the interesting try: catch: pattern is done as their isn't a guarantee that the user has any of the given output formatters installed, which is required for preconvert to plug-in it's preconversion.","title":"Module preconvert.output"},{"location":"preconvert/output/#sub-modules","text":"preconvert.output.bson preconvert.output.json preconvert.output.msgpack preconvert.output.simplejson","title":"Sub-modules"},{"location":"preconvert/output/bson/","text":"Module preconvert.output.bson Functions dump def ( content, *args, on_unknown=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='bson'), **kwargs ) ON dump with preconversion for common unserializable types in place dumps def ( content, *args, on_unknown=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='bson'), **kwargs ) ON dumps with preconversion for common unserializable types in place","title":"BSON"},{"location":"preconvert/output/bson/#module-preconvertoutputbson","text":"","title":"Module preconvert.output.bson"},{"location":"preconvert/output/bson/#functions","text":"","title":"Functions"},{"location":"preconvert/output/bson/#dump","text":"def ( content, *args, on_unknown=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='bson'), **kwargs ) ON dump with preconversion for common unserializable types in place","title":"dump"},{"location":"preconvert/output/bson/#dumps","text":"def ( content, *args, on_unknown=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='bson'), **kwargs ) ON dumps with preconversion for common unserializable types in place","title":"dumps"},{"location":"preconvert/output/json/","text":"Module preconvert.output.json Functions dump def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='json'), **kwargs ) ON dump with preconversion for common unserializable types in place dumps def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='json'), **kwargs ) ON dumps with preconversion for common unserializable types in place","title":"JSON"},{"location":"preconvert/output/json/#module-preconvertoutputjson","text":"","title":"Module preconvert.output.json"},{"location":"preconvert/output/json/#functions","text":"","title":"Functions"},{"location":"preconvert/output/json/#dump","text":"def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='json'), **kwargs ) ON dump with preconversion for common unserializable types in place","title":"dump"},{"location":"preconvert/output/json/#dumps","text":"def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='json'), **kwargs ) ON dumps with preconversion for common unserializable types in place","title":"dumps"},{"location":"preconvert/output/msgpack/","text":"Module preconvert.output.msgpack Functions dump def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpack dump with preconversion for common unserializable types in place dumps def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpacks dump with preconversion for common unserializable types in place pack def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpacks with preconversion for common unserializable types in place packb def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpacks with preconversion for common unserializable types in place","title":"MsgPack"},{"location":"preconvert/output/msgpack/#module-preconvertoutputmsgpack","text":"","title":"Module preconvert.output.msgpack"},{"location":"preconvert/output/msgpack/#functions","text":"","title":"Functions"},{"location":"preconvert/output/msgpack/#dump","text":"def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpack dump with preconversion for common unserializable types in place","title":"dump"},{"location":"preconvert/output/msgpack/#dumps","text":"def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpacks dump with preconversion for common unserializable types in place","title":"dumps"},{"location":"preconvert/output/msgpack/#pack","text":"def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpacks with preconversion for common unserializable types in place","title":"pack"},{"location":"preconvert/output/msgpack/#packb","text":"def ( content, *args, default=functools.partial(<function default_serializer at 0x7f440fe9ed08>, namespace='msgpack'), **kwargs ) gpacks with preconversion for common unserializable types in place","title":"packb"},{"location":"preconvert/output/simplejson/","text":"Module preconvert.output.simplejson","title":"SimpleJSON"},{"location":"preconvert/output/simplejson/#module-preconvertoutputsimplejson","text":"","title":"Module preconvert.output.simplejson"}]}