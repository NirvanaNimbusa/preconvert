{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Preconvert is a library that extends existing serializiers (json, simplejson, bson, msgpack, ..) to be capable of converting the types you use. It accomplishes this by efficiently preconverting just the types the serializers aren't aware of (things like dataclasses and namedtuples) into basic built-in types that all serializers can understand. It then provides a mechanism for you to build custom preconverters, and preconvert_plugins that automatically take effect when installed via pip. Quickstart Install preconvert using pip: pip3 install preconvert Replace existing json (or other serialization library) with preconvert equivalent: from preconvert.output import simplejson as json ... json . dumps ( MY_COMPLEX_OBJECT_WITH_DATA_CLASSSES ) Enjoy a more comprehensive and configurable serializer! Why? Have you ever tried to json.dumps a data structure, only to be surprised when your DataClass throws an exception, or your namedtuple outputs as a list? Preconvert was created to solve this problem across common serialization formats. Before Preconvert: import sys import json from dataclasses import dataclass @dataclass class InventoryItem : \"\"\"Class for keeping track of an item in inventory.\"\"\" name : str unit_price : float quantity_on_hand : int = 0 def total_cost ( self ) -> float : return self . unit_price * self . quantity_on_hand my_store_inventory = [ InventoryItem ( \"beer\" , unit_price = 0.0 , quantity_on_hand = sys . maxsize ), InventoryItem ( \"bacon\" , unit_price = 2.5 , quantity_on_hand = 3 )] json . dumps ( my_store_inventory ) output >>> 177 178 --> 179 raise TypeError ( f 'Object of type {o.__class__.__name__} ' 180 f 'is not JSON serializable' ) 181 TypeError : Object of type InventoryItem is not JSON serializable D : After preconvert: import sys import json from preconvert.output import json @dataclass class InventoryItem : \"\"\"Class for keeping track of an item in inventory.\"\"\" name : str unit_price : float quantity_on_hand : int = 0 def total_cost ( self ) -> float : return self . unit_price * self . quantity_on_hand my_store_inventory = [ InventoryItem ( \"beer\" , unit_price = 0.0 , quantity_on_hand = sys . maxsize ), InventoryItem ( \"bacon\" , unit_price = 2.5 , quantity_on_hand = 3 )] json . dumps ( my_store_inventory ) >>> '[{\"name\": \"beer\", \"unit_price\": 0.0, \"quantity_on_hand\": 9223372036854775807}, {\"name\": \"bacon\", \"unit_price\": 2.5, \"quantity_on_hand\": 3}]' : D Design goals: Enable conversion from complex to simple types independent of desired output format Provide built-in conversion for common types that are not universally supported (dataclasses, namedtuple, etc...) Provide a way to build custom preconverts or override built-in preconverts Ability to build preconverts that are dependent on the destination format Easy utilization from existing projects Minimal overhead when utilized with common serialization formats How do I use this? Download pip3 install preconvert Utilize If your project uses one of our built-in supported serializers (json, msgpak, bson) you can simply replace your existing serializer import with a preconvert one: from preconvert.outputs import json OR from preconvert.outputs import simplejson as json OR from preconvert.outputs import msgpack OR from preconvert.outputs import bson If not you can inject preconvert before usage of any other serializers, often by setting a default or on_onknown parameter: import preconvert import my_serializer my_serializer . dumps ( default = preconvert . default_serializable ) How do I extend this? Want to add preconversion to your own custom types? For OOP projects, one easy way to do this is to add a __preconvert__ method to your object: class MyCustomClass ( object ): def __init__ ( self , first_name , children = ()): self . first_name = first_name self . children = children def __jsonifiable__ ( self ) return { 'first' : self . first_name , 'children' : children } For other entities, such as objects you do not control, you can register a new preconvert using the preconvert.converter decorator: import preconvert @preconvert.converter ( SomeFrameworkObject ) def convert_framework_object ( instance ): return { 'name' : instance . name } You can also, optionally, specify preconversions per an intended serialization format: import preconvert @preconvert.json ( SomeFrameworkObject ) def convert_framework_object ( instance ): return { 'json' : { 'name' : instance . name }} @preconvert.msgpack ( SomeFrameworkObject ) def convert_framework_object ( instance ): return [ 'name' , instance . name ]","title":"Home"},{"location":"#quickstart","text":"Install preconvert using pip: pip3 install preconvert Replace existing json (or other serialization library) with preconvert equivalent: from preconvert.output import simplejson as json ... json . dumps ( MY_COMPLEX_OBJECT_WITH_DATA_CLASSSES ) Enjoy a more comprehensive and configurable serializer!","title":"Quickstart"},{"location":"#why","text":"Have you ever tried to json.dumps a data structure, only to be surprised when your DataClass throws an exception, or your namedtuple outputs as a list? Preconvert was created to solve this problem across common serialization formats. Before Preconvert: import sys import json from dataclasses import dataclass @dataclass class InventoryItem : \"\"\"Class for keeping track of an item in inventory.\"\"\" name : str unit_price : float quantity_on_hand : int = 0 def total_cost ( self ) -> float : return self . unit_price * self . quantity_on_hand my_store_inventory = [ InventoryItem ( \"beer\" , unit_price = 0.0 , quantity_on_hand = sys . maxsize ), InventoryItem ( \"bacon\" , unit_price = 2.5 , quantity_on_hand = 3 )] json . dumps ( my_store_inventory ) output >>> 177 178 --> 179 raise TypeError ( f 'Object of type {o.__class__.__name__} ' 180 f 'is not JSON serializable' ) 181 TypeError : Object of type InventoryItem is not JSON serializable D : After preconvert: import sys import json from preconvert.output import json @dataclass class InventoryItem : \"\"\"Class for keeping track of an item in inventory.\"\"\" name : str unit_price : float quantity_on_hand : int = 0 def total_cost ( self ) -> float : return self . unit_price * self . quantity_on_hand my_store_inventory = [ InventoryItem ( \"beer\" , unit_price = 0.0 , quantity_on_hand = sys . maxsize ), InventoryItem ( \"bacon\" , unit_price = 2.5 , quantity_on_hand = 3 )] json . dumps ( my_store_inventory ) >>> '[{\"name\": \"beer\", \"unit_price\": 0.0, \"quantity_on_hand\": 9223372036854775807}, {\"name\": \"bacon\", \"unit_price\": 2.5, \"quantity_on_hand\": 3}]' : D","title":"Why?"},{"location":"#design-goals","text":"Enable conversion from complex to simple types independent of desired output format Provide built-in conversion for common types that are not universally supported (dataclasses, namedtuple, etc...) Provide a way to build custom preconverts or override built-in preconverts Ability to build preconverts that are dependent on the destination format Easy utilization from existing projects Minimal overhead when utilized with common serialization formats","title":"Design goals:"},{"location":"#how-do-i-use-this","text":"Download pip3 install preconvert Utilize If your project uses one of our built-in supported serializers (json, msgpak, bson) you can simply replace your existing serializer import with a preconvert one: from preconvert.outputs import json OR from preconvert.outputs import simplejson as json OR from preconvert.outputs import msgpack OR from preconvert.outputs import bson If not you can inject preconvert before usage of any other serializers, often by setting a default or on_onknown parameter: import preconvert import my_serializer my_serializer . dumps ( default = preconvert . default_serializable )","title":"How do I use this?"},{"location":"#how-do-i-extend-this","text":"Want to add preconversion to your own custom types? For OOP projects, one easy way to do this is to add a __preconvert__ method to your object: class MyCustomClass ( object ): def __init__ ( self , first_name , children = ()): self . first_name = first_name self . children = children def __jsonifiable__ ( self ) return { 'first' : self . first_name , 'children' : children } For other entities, such as objects you do not control, you can register a new preconvert using the preconvert.converter decorator: import preconvert @preconvert.converter ( SomeFrameworkObject ) def convert_framework_object ( instance ): return { 'name' : instance . name } You can also, optionally, specify preconversions per an intended serialization format: import preconvert @preconvert.json ( SomeFrameworkObject ) def convert_framework_object ( instance ): return { 'json' : { 'name' : instance . name }} @preconvert.msgpack ( SomeFrameworkObject ) def convert_framework_object ( instance ): return [ 'name' , instance . name ]","title":"How do I extend this?"},{"location":"ACKNOWLEDGEMENTS/","text":"Contributors Core Developers Timothy Edmund Crosley (@timothycrosley) Notable Bug Reporters - Code Contributors - Documenters - A sincere thanks to everyone who helps make preconvert into a great Python3 project! ~Timothy Crosley","title":"Acknowledgements"},{"location":"ACKNOWLEDGEMENTS/#contributors","text":"","title":"Contributors"},{"location":"ACKNOWLEDGEMENTS/#core-developers","text":"Timothy Edmund Crosley (@timothycrosley)","title":"Core Developers"},{"location":"ACKNOWLEDGEMENTS/#notable-bug-reporters","text":"-","title":"Notable Bug Reporters"},{"location":"ACKNOWLEDGEMENTS/#code-contributors","text":"-","title":"Code Contributors"},{"location":"ACKNOWLEDGEMENTS/#documenters","text":"- A sincere thanks to everyone who helps make preconvert into a great Python3 project! ~Timothy Crosley","title":"Documenters"},{"location":"CHANGELOG/","text":"Install the latest To install the latest version of preconvert simply run: pip3 install preconvert --upgrade Ideally, within a virtual environment. Changelog 1.0.0 - TBD","title":"Changelog"},{"location":"CHANGELOG/#install-the-latest","text":"To install the latest version of preconvert simply run: pip3 install preconvert --upgrade Ideally, within a virtual environment.","title":"Install the latest"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#100-tbd","text":"","title":"1.0.0 - TBD"},{"location":"CODE_OF_CONDUCT/","text":"HOPE 11 -- Code of Conduct HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019 Abstract Defines the Code of Conduct for Hug and all related projects. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#hope-11-code-of-conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019","title":"HOPE 11 -- Code of Conduct"},{"location":"CODE_OF_CONDUCT/#abstract","text":"Defines the Code of Conduct for Hug and all related projects.","title":"Abstract"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"CODING_STANDARD/","text":"HOPE 8 -- Style Guide for Hug Code HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019 Introduction This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference. PEP 8 Foundation All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines. Line Length Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters. Descriptive Variable names Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand. Adding new modules New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible. Automated Code Cleaners All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place. Automated Code Linting All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"Coding Standard"},{"location":"CODING_STANDARD/#hope-8-style-guide-for-hug-code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019","title":"HOPE 8 -- Style Guide for Hug Code"},{"location":"CODING_STANDARD/#introduction","text":"This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.","title":"Introduction"},{"location":"CODING_STANDARD/#pep-8-foundation","text":"All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.","title":"PEP 8 Foundation"},{"location":"CODING_STANDARD/#line-length","text":"Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.","title":"Line Length"},{"location":"CODING_STANDARD/#descriptive-variable-names","text":"Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.","title":"Descriptive Variable names"},{"location":"CODING_STANDARD/#adding-new-modules","text":"New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Adding new modules"},{"location":"CODING_STANDARD/#automated-code-cleaners","text":"All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.","title":"Automated Code Cleaners"},{"location":"CODING_STANDARD/#automated-code-linting","text":"All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"Automated Code Linting"},{"location":"CONTRIBUTING/","text":"Contributing to preconvert Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place. Getting preconvert set up for local development The first step when contributing to any project is getting it set up on your local machine. preconvert aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.5+ pipenv bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/preconvert.git `cd preconvert pipenv sync Install preconvert itself with pip install . or pip install -e . (for editable mode). Making a contribution Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main preconvert project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the ACKNOWLEDGEMENTS.md list :). Thank you! I can not tell you how thankful I am for the hard work done by preconvert contributors like you . Thank you! ~Timothy Crosley","title":"Contributing Guide"},{"location":"CONTRIBUTING/#contributing-to-preconvert","text":"Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.","title":"Contributing to preconvert"},{"location":"CONTRIBUTING/#getting-preconvert-set-up-for-local-development","text":"The first step when contributing to any project is getting it set up on your local machine. preconvert aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.5+ pipenv bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/preconvert.git `cd preconvert pipenv sync Install preconvert itself with pip install . or pip install -e . (for editable mode).","title":"Getting preconvert set up for local development"},{"location":"CONTRIBUTING/#making-a-contribution","text":"Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main preconvert project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the ACKNOWLEDGEMENTS.md list :).","title":"Making a contribution"},{"location":"CONTRIBUTING/#thank-you","text":"I can not tell you how thankful I am for the hard work done by preconvert contributors like you . Thank you! ~Timothy Crosley","title":"Thank you!"},{"location":"preconvert/","text":"Module preconvert A Library to enable preconversion of any Python type into one that is easily serializable Sub-modules preconvert.convert preconvert.converters preconvert.exceptions preconvert.output preconvert.register Functions converter def ( * kinds : Any , scope : str = 'base' , store : Dict [ str , Dict [ str , Dict [ str , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}}, override : bool = False , package : Union [ str , preconvert . register . AutoPackage ] = < AutoPackage . FUNCTION_OR_PRECONVERT : 3 > ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged. default_serializer def ( item : Any , namespace : str = 'base' , base_namespace : str = 'base' , using : Union [ Iterable [ str ], preconvert . convert . PreconversionSource ] = < PreconversionSource . ALL_PACKAGES : 1 > , store : Dict [ str , Dict [ str , Dict [ Any , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}} )","title":"Preconvert"},{"location":"preconvert/#module-preconvert","text":"A Library to enable preconversion of any Python type into one that is easily serializable","title":"Module preconvert"},{"location":"preconvert/#sub-modules","text":"preconvert.convert preconvert.converters preconvert.exceptions preconvert.output preconvert.register","title":"Sub-modules"},{"location":"preconvert/#functions","text":"","title":"Functions"},{"location":"preconvert/#converter","text":"def ( * kinds : Any , scope : str = 'base' , store : Dict [ str , Dict [ str , Dict [ str , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}}, override : bool = False , package : Union [ str , preconvert . register . AutoPackage ] = < AutoPackage . FUNCTION_OR_PRECONVERT : 3 > ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged.","title":"converter"},{"location":"preconvert/#default_serializer","text":"def ( item : Any , namespace : str = 'base' , base_namespace : str = 'base' , using : Union [ Iterable [ str ], preconvert . convert . PreconversionSource ] = < PreconversionSource . ALL_PACKAGES : 1 > , store : Dict [ str , Dict [ str , Dict [ Any , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}} )","title":"default_serializer"},{"location":"preconvert/convert/","text":"Module preconvert.convert Functions default_serializer def ( item : Any , namespace : str = 'base' , base_namespace : str = 'base' , using : Union [ Iterable [ str ], preconvert . convert . PreconversionSource ] = < PreconversionSource . ALL_PACKAGES : 1 > , store : Dict [ str , Dict [ str , Dict [ Any , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}} ) Classes PreconversionSource class ( * args , ** kwargs ) All globally available conversion sources Ancestors (in MRO) enum.Enum Class variables python3 ALL_PACKAGES : python3 PRECONVERT :","title":"Convert"},{"location":"preconvert/convert/#module-preconvertconvert","text":"","title":"Module preconvert.convert"},{"location":"preconvert/convert/#functions","text":"","title":"Functions"},{"location":"preconvert/convert/#default_serializer","text":"def ( item : Any , namespace : str = 'base' , base_namespace : str = 'base' , using : Union [ Iterable [ str ], preconvert . convert . PreconversionSource ] = < PreconversionSource . ALL_PACKAGES : 1 > , store : Dict [ str , Dict [ str , Dict [ Any , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}} )","title":"default_serializer"},{"location":"preconvert/convert/#classes","text":"","title":"Classes"},{"location":"preconvert/convert/#preconversionsource","text":"class ( * args , ** kwargs ) All globally available conversion sources","title":"PreconversionSource"},{"location":"preconvert/convert/#ancestors-in-mro","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"preconvert/convert/#class-variables","text":"python3 ALL_PACKAGES : python3 PRECONVERT :","title":"Class variables"},{"location":"preconvert/converters/","text":"Module preconvert.converters Functions byte_converter def ( item ) convert_data_class def ( instance ) convert_namedtuple def ( instance : Any ) -> Union [ Dict , tuple ] nverts a tuple of type namedtuple to a dict. This isn't registered as injecting this via registration won't work because it will never be falling through to as tuples convert to list. if the tuple isn't a named one, it will return the tuple unchanged datetime_converter def ( item ) time_delta_converter def ( item ) use_value_attribute def ( item )","title":"Converters"},{"location":"preconvert/converters/#module-preconvertconverters","text":"","title":"Module preconvert.converters"},{"location":"preconvert/converters/#functions","text":"","title":"Functions"},{"location":"preconvert/converters/#byte_converter","text":"def ( item )","title":"byte_converter"},{"location":"preconvert/converters/#convert_data_class","text":"def ( instance )","title":"convert_data_class"},{"location":"preconvert/converters/#convert_namedtuple","text":"def ( instance : Any ) -> Union [ Dict , tuple ] nverts a tuple of type namedtuple to a dict. This isn't registered as injecting this via registration won't work because it will never be falling through to as tuples convert to list. if the tuple isn't a named one, it will return the tuple unchanged","title":"convert_namedtuple"},{"location":"preconvert/converters/#datetime_converter","text":"def ( item )","title":"datetime_converter"},{"location":"preconvert/converters/#time_delta_converter","text":"def ( item )","title":"time_delta_converter"},{"location":"preconvert/converters/#use_value_attribute","text":"def ( item )","title":"use_value_attribute"},{"location":"preconvert/exceptions/","text":"Module preconvert.exceptions Defines all exceptions that can be thrown by the preconvert project Classes Error class ( * args , ** kwargs ) Base class for exceptions thrown from the preconvert project Ancestors (in MRO) builtins.Exception builtins.BaseException Descendants preconvert.exceptions.ExistingConverter preconvert.exceptions.Unconvertable ExistingConverter class ( kind , existing , new ) Should be raised when a converter already exists for a specified type Ancestors (in MRO) preconvert.exceptions.Error builtins.Exception builtins.BaseException Unconvertable class ( item ) Raised when the provided item is not convertable using the provided converter(s) Ancestors (in MRO) preconvert.exceptions.Error builtins.Exception builtins.BaseException","title":"Exceptions"},{"location":"preconvert/exceptions/#module-preconvertexceptions","text":"Defines all exceptions that can be thrown by the preconvert project","title":"Module preconvert.exceptions"},{"location":"preconvert/exceptions/#classes","text":"","title":"Classes"},{"location":"preconvert/exceptions/#error","text":"class ( * args , ** kwargs ) Base class for exceptions thrown from the preconvert project","title":"Error"},{"location":"preconvert/exceptions/#ancestors-in-mro","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"preconvert/exceptions/#descendants","text":"preconvert.exceptions.ExistingConverter preconvert.exceptions.Unconvertable","title":"Descendants"},{"location":"preconvert/exceptions/#existingconverter","text":"class ( kind , existing , new ) Should be raised when a converter already exists for a specified type","title":"ExistingConverter"},{"location":"preconvert/exceptions/#ancestors-in-mro_1","text":"preconvert.exceptions.Error builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"preconvert/exceptions/#unconvertable","text":"class ( item ) Raised when the provided item is not convertable using the provided converter(s)","title":"Unconvertable"},{"location":"preconvert/exceptions/#ancestors-in-mro_2","text":"preconvert.exceptions.Error builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"preconvert/register/","text":"Module preconvert.register This module handles the registration of preconverters Functions converter def ( * kinds : Any , scope : str = 'base' , store : Dict [ str , Dict [ str , Dict [ str , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}}, override : bool = False , package : Union [ str , preconvert . register . AutoPackage ] = < AutoPackage . FUNCTION_OR_PRECONVERT : 3 > ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged. Classes AutoPackage class ( * args , ** kwargs ) Provides options for the automatic determination of a package name Ancestors (in MRO) enum.Enum Class variables python3 FUNCTION : python3 FUNCTION_OR_PRECONVERT : python3 PRECONVERT :","title":"Register"},{"location":"preconvert/register/#module-preconvertregister","text":"This module handles the registration of preconverters","title":"Module preconvert.register"},{"location":"preconvert/register/#functions","text":"","title":"Functions"},{"location":"preconvert/register/#converter","text":"def ( * kinds : Any , scope : str = 'base' , store : Dict [ str , Dict [ str , Dict [ str , Callable ]]] = { 'preconvert' : { 'base' : { < class ' object '>: <function convert_data_class at 0x7f9099014048>, typing.Collection: <class ' list '>, <class ' generator '>: <class ' tuple '>, typing.Mapping: <class ' dict '>, <class ' decimal . Decimal '>: <class ' str '>, <class ' uuid . UUID '>: <class ' str '>, <class ' bytes '>: <function byte_converter at 0x7f90990140d0>, <class ' datetime . date '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . datetime '>: <function datetime_converter at 0x7f9099014158>, <class ' datetime . timedelta '>: <function time_delta_converter at 0x7f90990141e0>, <enum ' Enum '>: <function use_value_attribute at 0x7f9099014268>, <class ' typing . NamedTuple '>: <function convert_namedtuple at 0x7f90990142f0>}}}, override : bool = False , package : Union [ str , preconvert . register . AutoPackage ] = < AutoPackage . FUNCTION_OR_PRECONVERT : 3 > ) -> Callable decorator that registers the wrapped function as a pre-converter for the provided types in the provided store data structure or a default global one. Returns the decorated function unchanged.","title":"converter"},{"location":"preconvert/register/#classes","text":"","title":"Classes"},{"location":"preconvert/register/#autopackage","text":"class ( * args , ** kwargs ) Provides options for the automatic determination of a package name","title":"AutoPackage"},{"location":"preconvert/register/#ancestors-in-mro","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"preconvert/register/#class-variables","text":"python3 FUNCTION : python3 FUNCTION_OR_PRECONVERT : python3 PRECONVERT :","title":"Class variables"},{"location":"preconvert/output/","text":"Module preconvert.output Exposes all output formatters that have built-in support for preconversion Note: the interesting try: catch: pattern is done as their isn't a guarantee that the user has any of the given output formatters installed, which is required for preconvert to plug-in it's preconversion. Sub-modules preconvert.output.bson preconvert.output.json preconvert.output.msgpack preconvert.output.simplejson","title":"Output"},{"location":"preconvert/output/#module-preconvertoutput","text":"Exposes all output formatters that have built-in support for preconversion Note: the interesting try: catch: pattern is done as their isn't a guarantee that the user has any of the given output formatters installed, which is required for preconvert to plug-in it's preconversion.","title":"Module preconvert.output"},{"location":"preconvert/output/#sub-modules","text":"preconvert.output.bson preconvert.output.json preconvert.output.msgpack preconvert.output.simplejson","title":"Sub-modules"},{"location":"preconvert/output/bson/","text":"Module preconvert.output.bson Functions dump def ( content , * args , on_unknown = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'bson' ), ** kwargs ) ON dump with preconversion for common unserializable types in place dumps def ( content , * args , on_unknown = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'bson' ), ** kwargs ) ON dumps with preconversion for common unserializable types in place","title":"BSON"},{"location":"preconvert/output/bson/#module-preconvertoutputbson","text":"","title":"Module preconvert.output.bson"},{"location":"preconvert/output/bson/#functions","text":"","title":"Functions"},{"location":"preconvert/output/bson/#dump","text":"def ( content , * args , on_unknown = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'bson' ), ** kwargs ) ON dump with preconversion for common unserializable types in place","title":"dump"},{"location":"preconvert/output/bson/#dumps","text":"def ( content , * args , on_unknown = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'bson' ), ** kwargs ) ON dumps with preconversion for common unserializable types in place","title":"dumps"},{"location":"preconvert/output/json/","text":"Module preconvert.output.json Functions dump def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'json' ), ** kwargs ) ON dump with preconversion for common unserializable types in place dumps def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'json' ), ** kwargs ) ON dumps with preconversion for common unserializable types in place","title":"JSON"},{"location":"preconvert/output/json/#module-preconvertoutputjson","text":"","title":"Module preconvert.output.json"},{"location":"preconvert/output/json/#functions","text":"","title":"Functions"},{"location":"preconvert/output/json/#dump","text":"def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'json' ), ** kwargs ) ON dump with preconversion for common unserializable types in place","title":"dump"},{"location":"preconvert/output/json/#dumps","text":"def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'json' ), ** kwargs ) ON dumps with preconversion for common unserializable types in place","title":"dumps"},{"location":"preconvert/output/msgpack/","text":"Module preconvert.output.msgpack Functions dump def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpack dump with preconversion for common unserializable types in place dumps def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpacks dump with preconversion for common unserializable types in place pack def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpacks with preconversion for common unserializable types in place packb def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpacks with preconversion for common unserializable types in place","title":"MsgPack"},{"location":"preconvert/output/msgpack/#module-preconvertoutputmsgpack","text":"","title":"Module preconvert.output.msgpack"},{"location":"preconvert/output/msgpack/#functions","text":"","title":"Functions"},{"location":"preconvert/output/msgpack/#dump","text":"def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpack dump with preconversion for common unserializable types in place","title":"dump"},{"location":"preconvert/output/msgpack/#dumps","text":"def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpacks dump with preconversion for common unserializable types in place","title":"dumps"},{"location":"preconvert/output/msgpack/#pack","text":"def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpacks with preconversion for common unserializable types in place","title":"pack"},{"location":"preconvert/output/msgpack/#packb","text":"def ( content , * args , default = functools . partial ( < function default_serializer at 0x7f9099098950 > , namespace = 'msgpack' ), ** kwargs ) gpacks with preconversion for common unserializable types in place","title":"packb"},{"location":"preconvert/output/simplejson/","text":"Module preconvert.output.simplejson","title":"SimpleJSON"},{"location":"preconvert/output/simplejson/#module-preconvertoutputsimplejson","text":"","title":"Module preconvert.output.simplejson"}]}